clc; clear; close all;


num_layers = 2;  
sigma_res = 0.1;
sigma_phase = 0.05;
NumFreq = 50;    
frequency = logspace(3, -3, NumFreq); 

res_true = [500, 1000, 100, 500, 1000, 200]; 
thickness_true = [210, 1624, 1346, 1435, 1800];  

[AppRes_obs, Phase_obs] = deal(zeros(NumFreq, 1));
for j = 1:NumFreq
    [tmp1, tmp2, ~] = MTmodeling1D(res_true, thickness_true, frequency(j));
    AppRes_obs(j) = tmp1 * (1 + randn * sigma_res);  
    Phase_obs(j) = tmp2 * (1 + randn * sigma_phase); 
end


priorpdf = @(theta) double(...
    theta(1) > 400 && theta(1) < 600 && ...
    theta(2) > 900 && theta(2) < 1100 && ...
    theta(3) > 50 && theta(3) < 250); %&& ...
    % theta(4) > 10 && theta(4) < 1000 && ...
    % theta(5) > 10 && theta(5) < 1000 && ...
    % theta(6) > 10 && theta(6) < 1000 && ...
    % theta(7) > 1 && theta(7) < 2000 && ...
    % theta(8) > 1 && theta(8) < 2000 && ...
    % theta(9) > 1 && theta(9) < 2000 && ...
    % theta(10) > 1 && theta(10) < 2000 && ...
    % theta(11) > 1 && theta(11) < 2000);

priorrnd = @(n) [...
    rand(n, 1) * (200) + 400, ...  % res_1
    rand(n, 1) * (200) + 900, ...  % res_2
     rand(n, 1) * (200) + 50]; %...   res_3
    % rand(n, 1) * (1000 - 10) + 10, ...  % res_4
    % rand(n, 1) * (1000 - 10) + 10, ...  % res_5
    % rand(n, 1) * (1000 - 10) + 10, ...  % res_6
    %rand(n, 1) * (200) + 50];   ...  % thickness_1
    % rand(n, 1) * (2000 - 1) + 1,   ...  % thickness_2
    % rand(n, 1) * (2000 - 1) + 1,   ...  % thickness_3
    % rand(n, 1) * (2000 - 1) + 1,   ...  % thickness_4
    % rand(n, 1) * (2000 - 1) + 1];       % thickness_5


sigma_res1 = 1;
sigma_phase1 = 5;
loglikelihood = @(theta) -0.5 * ( ...
    norm((AppRes_obs - cell2mat(arrayfun(@(f) ...
        MTmodeling1D(theta(1:num_layers), theta(num_layers+1:end), f), frequency, 'UniformOutput', false))) / sigma_res1).^2 + ...
    norm((Phase_obs - cell2mat(arrayfun(@(f) ...
        MTmodeling1D(theta(1:num_layers), theta(num_layers+1:end), f), frequency, 'UniformOutput', false))) / sigma_phase1).^2);



fprintf('Running TMCMC...\n');
tic;
output_tmcmc = tmcmc_par('nsamples', 500, ...
                         'loglikelihood', loglikelihood, ...
                         'priorpdf', priorpdf, ...
                         'priorrnd', priorrnd, ...
                         'burnin', 10, ...
                         'lastburnin', 50);
time_tmcmc = toc;


samples_tmcmc = output_tmcmc.samples;
save('output_tmcmc','output_tmcmc');
save('time_tmcmc','time_tmcmc');

 % Run Langevin TMCMC
fprintf('Running Langevin TMCMC...\n');
tic;
output_langevin = ltmcmc_par('nsamples', 500, ...
                                       'loglikelihood', loglikelihood, ...
                                       'priorpdf', priorpdf, ...
                                       'priorrnd', priorrnd, ...
                                       'burnin', 500, ...
                                       'epsilon', 0.03);
time_ltmcmc = toc;
samples_langevin = output_langevin.samples;

save('output_tmcmc','output_tmcmc');
save('time_tmcmc','time_tmcmc');

fprintf('Running Langevin tlmalt...\n');
tic;
output_langevin = tlmalt_par('nsamples', 500, ...
                                       'loglikelihood', loglikelihood, ...
                                       'priorpdf', priorpdf, ...
                                       'priorrnd', priorrnd, ...
                                       'burnin', 20, ...
                                       'epsilon',0.03);
time_tmalt = toc;
samples_tmalt = output_langevin.samples;
save('output_tmcmc','output_tmcmc');
save('time_tmcmc','time_tmcmc');